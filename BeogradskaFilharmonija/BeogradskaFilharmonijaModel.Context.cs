//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BeogradskaFilharmonija
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BeogradskaFilharmonijaModelEntities1 : DbContext
    {
        public BeogradskaFilharmonijaModelEntities1()
            : base("name=BeogradskaFilharmonijaModelEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<clan_klubaSet> clan_klubaSet { get; set; }
        public virtual DbSet<djakSet> djakSet { get; set; }
        public virtual DbSet<dvoranaSet> dvoranaSet { get; set; }
        public virtual DbSet<izvodjenjeSet> izvodjenjeSet { get; set; }
        public virtual DbSet<kartaSet> kartaSet { get; set; }
        public virtual DbSet<koncertSet> koncertSet { get; set; }
        public virtual DbSet<Korisnik> Korisnik { get; set; }
        public virtual DbSet<orkestarSet> orkestarSet { get; set; }
        public virtual DbSet<penzionerSet> penzionerSet { get; set; }
        public virtual DbSet<posetilacSet> posetilacSet { get; set; }
        public virtual DbSet<salaSet> salaSet { get; set; }
        public virtual DbSet<sef_dirigentSet> sef_dirigentSet { get; set; }
        public virtual DbSet<Statistic> Statistic { get; set; }
        public virtual DbSet<studentSet> studentSet { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
    
        public virtual ObjectResult<SelectBrClanova_Result> SelectBrClanova(Nullable<double> max)
        {
            var maxParameter = max.HasValue ?
                new ObjectParameter("Max", max) :
                new ObjectParameter("Max", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectBrClanova_Result>("SelectBrClanova", maxParameter);
        }
    
        public virtual ObjectResult<SelectBrojClanova_Result> SelectBrojClanova(Nullable<double> max)
        {
            var maxParameter = max.HasValue ?
                new ObjectParameter("Max", max) :
                new ObjectParameter("Max", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectBrojClanova_Result>("SelectBrojClanova", maxParameter);
        }
    
        public virtual ObjectResult<SelectKartaCena_Result> SelectKartaCena(Nullable<double> limit)
        {
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectKartaCena_Result>("SelectKartaCena", limitParameter);
        }
    
        public virtual ObjectResult<Selectvelsce_Result> Selectvelsce(Nullable<double> min)
        {
            var minParameter = min.HasValue ?
                new ObjectParameter("Min", min) :
                new ObjectParameter("Min", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Selectvelsce_Result>("Selectvelsce", minParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
